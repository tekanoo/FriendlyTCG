class GeographicData {
  // Pays avec leurs régions principales
  static const Map<String, List<String>> countriesAndRegions = {
    'France': [
      'Auvergne-Rhône-Alpes',
      'Bourgogne-Franche-Comté',
      'Bretagne',
      'Centre-Val de Loire',
      'Corse',
      'Grand Est',
      'Hauts-de-France',
      'Île-de-France',
      'Normandie',
      'Nouvelle-Aquitaine',
      'Occitanie',
      'Pays de la Loire',
      'Provence-Alpes-Côte d\'Azur',
      'Guadeloupe',
      'Martinique',
      'Guyane',
      'La Réunion',
      'Mayotte',
    ],
    'Canada': [
      'Alberta',
      'Colombie-Britannique',
      'Manitoba',
      'Nouveau-Brunswick',
      'Terre-Neuve-et-Labrador',
      'Territoires du Nord-Ouest',
      'Nouvelle-Écosse',
      'Nunavut',
      'Ontario',
      'Île-du-Prince-Édouard',
      'Québec',
      'Saskatchewan',
      'Yukon',
    ],
    'Belgique': [
      'Région de Bruxelles-Capitale',
      'Région flamande',
      'Région wallonne',
      'Anvers',
      'Limbourg',
      'Flandre-Orientale',
      'Brabant flamand',
      'Flandre-Occidentale',
      'Hainaut',
      'Liège',
      'Luxembourg',
      'Namur',
      'Brabant wallon',
    ],
    'Suisse': [
      'Argovie',
      'Appenzell Rhodes-Extérieures',
      'Appenzell Rhodes-Intérieures',
      'Bâle-Campagne',
      'Bâle-Ville',
      'Berne',
      'Fribourg',
      'Genève',
      'Glaris',
      'Grisons',
      'Jura',
      'Lucerne',
      'Neuchâtel',
      'Nidwald',
      'Obwald',
      'Saint-Gall',
      'Schaffhouse',
      'Schwytz',
      'Soleure',
      'Tessin',
      'Thurgovie',
      'Uri',
      'Valais',
      'Vaud',
      'Zoug',
      'Zurich',
    ],
    'Japon': [
      'Hokkaido',
      'Aomori',
      'Iwate',
      'Miyagi',
      'Akita',
      'Yamagata',
      'Fukushima',
      'Ibaraki',
      'Tochigi',
      'Gunma',
      'Saitama',
      'Chiba',
      'Tokyo',
      'Kanagawa',
      'Niigata',
      'Toyama',
      'Ishikawa',
      'Fukui',
      'Yamanashi',
      'Nagano',
      'Gifu',
      'Shizuoka',
      'Aichi',
      'Mie',
      'Shiga',
      'Kyoto',
      'Osaka',
      'Hyogo',
      'Nara',
      'Wakayama',
      'Tottori',
      'Shimane',
      'Okayama',
      'Hiroshima',
      'Yamaguchi',
      'Tokushima',
      'Kagawa',
      'Ehime',
      'Kochi',
      'Fukuoka',
      'Saga',
      'Nagasaki',
      'Kumamoto',
      'Oita',
      'Miyazaki',
      'Kagoshima',
      'Okinawa',
    ],
    'États-Unis': [
      'Alabama',
      'Alaska',
      'Arizona',
      'Arkansas',
      'Californie',
      'Colorado',
      'Connecticut',
      'Delaware',
      'Floride',
      'Géorgie',
      'Hawaï',
      'Idaho',
      'Illinois',
      'Indiana',
      'Iowa',
      'Kansas',
      'Kentucky',
      'Louisiane',
      'Maine',
      'Maryland',
      'Massachusetts',
      'Michigan',
      'Minnesota',
      'Mississippi',
      'Missouri',
      'Montana',
      'Nebraska',
      'Nevada',
      'New Hampshire',
      'New Jersey',
      'Nouveau-Mexique',
      'New York',
      'Caroline du Nord',
      'Dakota du Nord',
      'Ohio',
      'Oklahoma',
      'Oregon',
      'Pennsylvanie',
      'Rhode Island',
      'Caroline du Sud',
      'Dakota du Sud',
      'Tennessee',
      'Texas',
      'Utah',
      'Vermont',
      'Virginie',
      'Washington',
      'Virginie-Occidentale',
      'Wisconsin',
      'Wyoming',
    ],
    'Allemagne': [
      'Bade-Wurtemberg',
      'Bavière',
      'Berlin',
      'Brandebourg',
      'Brême',
      'Hambourg',
      'Hesse',
      'Mecklembourg-Poméranie-Occidentale',
      'Basse-Saxe',
      'Rhénanie-du-Nord-Westphalie',
      'Rhénanie-Palatinat',
      'Sarre',
      'Saxe',
      'Saxe-Anhalt',
      'Schleswig-Holstein',
      'Thuringe',
    ],
    'Royaume-Uni': [
      'Angleterre',
      'Écosse',
      'Pays de Galles',
      'Irlande du Nord',
      'Londres',
      'Midlands',
      'Yorkshire',
      'Lancashire',
      'Devon',
      'Cornwall',
    ],
    'Italie': [
      'Abruzzes',
      'Basilicate',
      'Calabre',
      'Campanie',
      'Émilie-Romagne',
      'Frioul-Vénétie julienne',
      'Latium',
      'Ligurie',
      'Lombardie',
      'Marches',
      'Molise',
      'Piémont',
      'Pouilles',
      'Sardaigne',
      'Sicile',
      'Toscane',
      'Trentin-Haut-Adige',
      'Ombrie',
      'Vallée d\'Aoste',
      'Vénétie',
    ],
    'Espagne': [
      'Andalousie',
      'Aragon',
      'Asturies',
      'Îles Baléares',
      'Pays basque',
      'Îles Canaries',
      'Cantabrie',
      'Castille-La Manche',
      'Castille-et-León',
      'Catalogne',
      'Estrémadure',
      'Galice',
      'La Rioja',
      'Madrid',
      'Murcie',
      'Navarre',
      'Valence',
    ],
    'Australie': [
      'Nouvelle-Galles du Sud',
      'Victoria',
      'Queensland',
      'Australie-Occidentale',
      'Australie-Méridionale',
      'Tasmanie',
      'Territoire de la capitale australienne',
      'Territoire du Nord',
    ],
  };

  // Villes principales par région (exemple pour quelques régions)
  static const Map<String, List<String>> regionCities = {
    // France
    'Île-de-France': [
      'Paris',
      'Boulogne-Billancourt',
      'Saint-Denis',
      'Argenteuil',
      'Montreuil',
      'Créteil',
      'Nanterre',
      'Colombes',
      'Aulnay-sous-Bois',
      'Rueil-Malmaison',
      'Aubervilliers',
      'Champigny-sur-Marne',
      'Saint-Maur-des-Fossés',
      'Drancy',
      'Issy-les-Moulineaux',
      'Levallois-Perret',
      'Noisy-le-Grand',
      'Antony',
      'Neuilly-sur-Seine',
      'Clichy',
    ],
    'Provence-Alpes-Côte d\'Azur': [
      'Marseille',
      'Nice',
      'Toulon',
      'Aix-en-Provence',
      'Avignon',
      'Antibes',
      'Cannes',
      'La Seyne-sur-Mer',
      'Hyères',
      'Fréjus',
      'Arles',
      'Grasse',
      'Gap',
      'Cagnes-sur-Mer',
      'Saint-Raphaël',
      'Draguignan',
      'Aubagne',
      'Istres',
      'Salon-de-Provence',
      'Martigues',
    ],
    'Auvergne-Rhône-Alpes': [
      'Lyon',
      'Grenoble',
      'Saint-Étienne',
      'Villeurbanne',
      'Clermont-Ferrand',
      'Valence',
      'Chambéry',
      'Annecy',
      'Bourg-en-Bresse',
      'Roanne',
      'Saint-Priest',
      'Vénissieux',
      'Montluçon',
      'Thonon-les-Bains',
      'Caluire-et-Cuire',
      'Vaulx-en-Velin',
      'Rillieux-la-Pape',
      'Annemasse',
      'Bourgoin-Jallieu',
      'Échirolles',
    ],
    
    // Canada
    'Québec': [
      'Montréal',
      'Québec',
      'Laval',
      'Gatineau',
      'Longueuil',
      'Sherbrooke',
      'Saguenay',
      'Lévis',
      'Trois-Rivières',
      'Terrebonne',
      'Saint-Jean-sur-Richelieu',
      'Repentigny',
      'Brossard',
      'Drummondville',
      'Saint-Jérôme',
      'Granby',
      'Blainville',
      'Saint-Hyacinthe',
      'Shawinigan',
      'Dollard-des-Ormeaux',
    ],
    'Ontario': [
      'Toronto',
      'Ottawa',
      'Hamilton',
      'London',
      'Markham',
      'Vaughan',
      'Kitchener',
      'Windsor',
      'Richmond Hill',
      'Oakville',
      'Burlington',
      'Sudbury',
      'Oshawa',
      'Barrie',
      'St. Catharines',
      'Cambridge',
      'Kingston',
      'Whitby',
      'Guelph',
      'Thunder Bay',
    ],
    
    // Japon
    'Tokyo': [
      'Shinjuku',
      'Shibuya',
      'Harajuku',
      'Ginza',
      'Akihabara',
      'Roppongi',
      'Ikebukuro',
      'Ueno',
      'Asakusa',
      'Odaiba',
    ],
    'Osaka': [
      'Osaka',
      'Sakai',
      'Higashiosaka',
      'Hirakata',
      'Toyonaka',
      'Suita',
      'Takatsuki',
      'Yao',
      'Neyagawa',
      'Kadoma',
    ],
  };

  // Obtenir tous les pays
  static List<String> getAllCountries() {
    return countriesAndRegions.keys.toList()..sort();
  }

  // Obtenir les régions pour un pays
  static List<String> getRegionsForCountry(String country) {
    return countriesAndRegions[country] ?? [];
  }

  // Obtenir les villes pour une région
  static List<String> getCitiesForRegion(String region) {
    return regionCities[region] ?? [];
  }

  // Rechercher des pays par nom
  static List<String> searchCountries(String query) {
    if (query.isEmpty) return getAllCountries();
    
    final lowerQuery = query.toLowerCase();
    return getAllCountries()
        .where((country) => country.toLowerCase().contains(lowerQuery))
        .toList();
  }

  // Rechercher des régions par nom dans un pays
  static List<String> searchRegions(String country, String query) {
    final regions = getRegionsForCountry(country);
    if (query.isEmpty) return regions;
    
    final lowerQuery = query.toLowerCase();
    return regions
        .where((region) => region.toLowerCase().contains(lowerQuery))
        .toList();
  }

  // Rechercher des villes par nom dans une région
  static List<String> searchCities(String region, String query) {
    final cities = getCitiesForRegion(region);
    if (query.isEmpty) return cities;
    
    final lowerQuery = query.toLowerCase();
    return cities
        .where((city) => city.toLowerCase().contains(lowerQuery))
        .toList();
  }
}
